#include "robot-config.h"
#include <cstdlib>
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VCS VEX V5                    */
/*                                                                           */
/*---------------------------------------------------------------------------*/

void moveRight(float distance){
    float degrees = distance * 360 /(2*1.625*3.141592653); // distance was in inches
    DriveFL.spin(vex::directionType::fwd,-50,vex::velocityUnits::pct);
    DriveBL.spin(vex::directionType::fwd,50,vex::velocityUnits::pct);
    DriveFR.spin(vex::directionType::fwd,-50,vex::velocityUnits::pct);
    DriveBR.rotateTo(degrees,vex::rotationUnits::deg,50,vex::velocityUnits::pct);
    
    DriveFL.stop();
    DriveBL.stop();
    DriveFR.stop();
    DriveBR.stop();
}




//Creates a competition object that allows access to Competition methods.
vex::competition    Competition;

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */ 
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton( void ) {
  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
  
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous( void ) {
    moveRight(1);
}




/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol( void ) {
  while (1) {
      if(Controller.ButtonL1.pressing()){ 
          LiftR.spin(vex::directionType::fwd,100,vex::velocityUnits::pct);
          LiftL.spin(vex::directionType::fwd,100,vex::velocityUnits::pct);
      }else if(Controller.ButtonL2.pressing()){
          LiftR.spin(vex::directionType::fwd,-100,vex::velocityUnits::pct);
          LiftL.spin(vex::directionType::fwd,-100,vex::velocityUnits::pct);
      }else{
          LiftL.stop(vex::brakeType::brake);
          LiftR.stop(vex::brakeType::brake);
      }
      if(abs(Controller.Axis4.value()) <= 5 && abs(Controller.Axis1.value()) <= 5 && abs(Controller.Axis2.value()) <= 5){
          DriveFR.stop(vex::brakeType::brake);
          DriveFL.stop(vex::brakeType::brake);
          DriveBR.stop(vex::brakeType::brake);
          DriveBL.stop(vex::brakeType::brake);
    }else{
          DriveFR.spin(vex::directionType::fwd,-Controller.Axis4.value() + Controller.Axis2.value() - Controller.Axis1.value(),vex::velocityUnits::pct);
          DriveFL.spin(vex::directionType::fwd,-Controller.Axis4.value() - Controller.Axis1.value() - Controller.Axis2.value(),vex::velocityUnits::pct);
          DriveBR.spin(vex::directionType::fwd,- Controller.Axis4.value() + Controller.Axis2.value() + Controller.Axis1.value(),vex::velocityUnits::pct);
          DriveBL.spin(vex::directionType::fwd,- Controller.Axis4.value() + Controller.Axis1.value() - Controller.Axis2.value(),vex::velocityUnits::pct);
    }
      if(Controller.ButtonR1.pressing()){
          ClawR.spin(vex::directionType::fwd,100,vex::velocityUnits::pct);
          ClawL.spin(vex::directionType::fwd,-100,vex::velocityUnits::pct);
      }else if(Controller.ButtonR2.pressing()){          
          ClawR.spin(vex::directionType::fwd,-100,vex::velocityUnits::pct);
          ClawL.spin(vex::directionType::fwd,100,vex::velocityUnits::pct);
      }else{
          ClawL.stop(vex::brakeType::brake);
          ClawR.stop(vex::brakeType::brake);
      }
     
      
    vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources. 
  }
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
    
    //Run the pre-autonomous function. 
    pre_auton();
    
    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );

    //Prevent main from exiting with an infinite loop.                        
    while(1) {
      vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
       
}
